#!/usr/bin/python
"""The Image Time Patcher.

The purpose of this script is to patch time stamps for when the images
where acquired. Generally the issue appears if images were transfered
to other media/drive than the one they were firstly written to, and when
there's a need to re-make the project.

The module can patch times both in the first pass file and in the final
analysis-xml file.
"""

import os
import re
import functools
from argparse import ArgumentParser


def get_time_generator(interval, totalImages, order="inc"):
    """A simple generator for time intervals.

    :param interval:
        The time in seconds between
    :param totalImages:
        The number of images in total
    :param order:
        Default value is 'inc' (incremental).
        Other accepted value is 'dec' (decremental)
    :return:
        Generator
    """

    if order.lower() == 'inc':

        order = 1

    else:

        order = -1

    for t in range(totalImages)[::order]:

        yield t * interval


def get_time_generator_from_file(fpath, order='inc'):
    """A simple iterator for the times in the source file.

    :param fpath:
        The path to the first past file
    :param order:
        Default value is 'inc' (incremental).
        Other accepted value is 'dec' (decremental)
    :return:
        Generator
    """

    fh = open(fpath, 'r')
    d = fh.read()
    fh.close()

    times = map(float, re.findall(r"'Time': ([\d.]*)", d))
    times = [t - min(times) for t in times]
    times.sort(reverse=order.lower() == 'dec')

    for t in times:

        yield t


compilation_pattern = re.compile(r" *time_stamp = ")


def write_times_to_project_compilation(file_path, time_generator):
    """

    Args:
        file_path (str): path to file
        time_generator (generator):
    """

    replacement = "time_stamp = {0}\n"

    with open(file_path, 'r') as fh:
        data = fh.readlines()

    for i, l in enumerate(data):
        if compilation_pattern.match(l):
            data[i] = replacement.format(time_generator.next())

    with open(file_path, 'w') as fh:
        fh.writelines(data)


def write_times_to_first_pass_file(fpath, timeGenerator):
    """Replaces times in a file with times from the generator

    :param fpath:
        Path to the first pass file
    :param timeGenerator:
        A time generator
    """
    REPLACEMENT = "'Time': {0}"
    PATTERN = r"'Time': [\d.]*"
    START_PATTERN = r"'Start Time': [\d.]*"
    START_REPLACEMENT = "'Start Time': {0}"

    fh = open(fpath, 'r')
    d = fh.read()
    fh.close()

    m = re.search(PATTERN, d)
    lTrunc = 0
    tMin = None

    while m is not None:

        t = timeGenerator.next()
        if tMin is None or t < tMin:
            tMin = t

        lBound, rBound = m.span()
        d = (d[:lBound + lTrunc] + REPLACEMENT.format(t) +
             d[rBound + lTrunc:])

        lTrunc += rBound
        m = re.search(PATTERN, d[lTrunc:])

    m = re.search(START_PATTERN, d)
    if m is not None:
        lBound, rBound = m.span()
        d = (d[:lBound] + START_REPLACEMENT.format(tMin) +
             d[rBound:])

    fh = open(fpath, 'w')
    fh.write(d)
    fh.close()


def write_times_to_xml_file(fpath, timeGenerator):
    """Replaces times in a file with times from the generator

    :param fpath:
        Path to the first pass file
    :param timeGenerator:
        A time generator
    """
    REPLACEMENT = "<t>{0}</t>"
    TIME_PATTERN = r'<t>([\d.]*)</t>'
    SCAN_PATTERN = r'<s i="\d*">.*?</s>'
    START_PATTERN = r'<start-t>([\d.]*)</start-t>'
    START_REPLACEMENT = '<start-t>{0}</start-t>'

    fh = open(fpath, 'r')
    d = fh.read()
    fh.close()

    m = re.search(SCAN_PATTERN, d)
    lTrunc = 0
    tMin = None

    while m is not None:

        m2 = re.search(TIME_PATTERN, m.group())
        lBound, rBound = m.span()

        t = timeGenerator.next()
        if tMin is None or t < tMin:
            tMin = t

        if m2 is not None:

            l2Bound, r2Bound = m2.span()

            d = (d[:lBound + lTrunc + l2Bound] +
                 REPLACEMENT.format(t) +
                 d[lBound + lTrunc + r2Bound:])

        lTrunc += rBound
        m = re.search(SCAN_PATTERN, d[lTrunc:])

    m = re.search(START_PATTERN, d)
    if m is not None:
        lBound, rBound = m.span()
        d = (d[:lBound] + START_REPLACEMENT.format(tMin) +
             d[rBound:])

    fh = open(fpath, 'w')
    fh.write(d)
    fh.close()


#
#   COMMAND LINE BEHAVIOUR
#

if __name__ == "__main__":

    parser = ArgumentParser(
        description=__doc__)

    ingroup = parser.add_argument_group("Input Options")

    ingroup.add_argument("-i", "--interval", dest="interval", type=float,
                         help="""A fixed interval between the image (minutes).
                         This should only be used if no original first pass
                         file is accessible""")

    ingroup.add_argument("-t", "--time-file", dest="source_file", type=str,
                         metavar="PATH",
                         help="""The path to a first pass file with correct
                         times in it. (If not supplied, a time interval is
                         needs be supplied.)""")

    outgroup = parser.add_argument_group("Output Options")

    outgroup.add_argument("-c", "--compilation", dest="target_compilation",
                          type=str, metavar="PATH",
                          help="""The project.compilation-file that should be
                          updated with new times""")

    outgroup.add_argument("-x", "--xml-file", dest="target_xml",
                          type=str, metavar="PATH",
                          help="""XML-file that should be updated
                          with new times""")

    outgroup.add_argument("-f", "--first-pass-file", dest="target_first",
                          type=str, metavar="PATH",
                          help="""First pass file that should be updated with
                          new times (this format is deprecated)""")

    args = parser.parse_args()

    TIME_PATTERN_XML = r'<t>([\d.]*)</t>'
    TIME_PATTERN_FIRST = r"\'Time\': ([\d.]*)"

    try:
        fh = open(args.target_xml)
        data = fh.read()
        fh.close()
        xmlImages = len(re.findall(TIME_PATTERN_XML, data))
    except:
        xmlImages = None

    try:
        fh = open(args.target_first)
        data = fh.read()
        fh.close()
        firstImages = len(re.findall(TIME_PATTERN_FIRST, data))
    except:
        firstImages = None

    try:
        with open(args.target_compilation, 'r') as fh:
            data = fh.readlines()
        compilationImages = len([1 for l in data if compilation_pattern.match(l)])
    except:
        compilationImages = None

    n_images = set(n for n in (xmlImages, firstImages, compilationImages) if n is not None)

    if len(n_images) != 1:

        parser.error("The number of images in the two out-files do not agree")

    n_images = n_images.pop()
    times_f = None

    if (args.source_file not in (None, "") and
            os.path.isfile(args.source_file)):

        times_f = functools.partial(get_time_generator_from_file,
                                    args.source_file)

    elif args.interval is not None:

        times_f = functools.partial(get_time_generator, args.interval * 60,
                                    n_images)

    else:

        parser.error("Could not find '{0}' and no interval submitted".format(
            args.source_file))

    done_something = False

    if (args.target_first not in (None, "") and os.path.isfile(
            args.target_first)):

        write_times_to_first_pass_file(args.target_first, times_f(order='inc'))
        done_something = True

    if (args.target_xml not in (None, "") and os.path.isfile(
            args.target_xml)):

        write_times_to_xml_file(args.target_xml, times_f(order='dec'))
        done_something = True

    if args.target_compilation not in (None, "") and os.path.isfile(args.target_compilation):

        write_times_to_project_compilation(args.target_compilation, times_f(order="inc"))
        done_something = True

    if not done_something:

        parser.error("Could not find of the output files (or non supplied)")

    else:

        print "Done!"
