#!/usr/bin/env python
"""This script runs a conversion of an analysis xml into image data files
"""
__author__ = "Martin Zackrisson"
__copyright__ = "Swedish copyright laws apply"
__credits__ = ["Martin Zackrisson"]
__license__ = "GPL v3.0"
__version__ = "0.9991"
__maintainer__ = "Martin Zackrisson"
__email__ = "martin.zackrisson@gu.se"
__status__ = "Development"

#
# DEPENDENCIES
#

from argparse import ArgumentParser
import os
import sys

#
# INTERNAL DEPENDENCIES
#

import scanomatic.io.xml.reader as reader
import scanomatic.io.image_data as image_data
import scanomatic.io.logger as logger

#
# GLOBALS
#

DEFAULT_SEQUENCE = {
    'cell:area': 0,
    'cell:pixel-sum': 1,
    'cell:median': 2,
    'cell:IQR': 3,
    'cell:IQR-mean': 4,
    'cell:mean': 5,
    'blob:perimeter': 6,
    'blob:area': 7,
    'blob:pixel-sum': 8,
    'blob:median': 9,
    'blob:IQR': 10,
    'blob:IQR-mean': 11,
    'blob:center-of-mass': 12,
    'blob:mean': 13,
    'bg:area': 14,
    'bg:pixel-sum': 15,
    'bg:median': 16,
    'bg:IQR': 17,
    'bg:IQR-mean': 18,
    'bg:mean': 19
}

#
# SCRIPT BEHAVIOUR
#

if __name__ == "__main__":

    log = logger.Logger("Scan-o-Matic XML2ImageData")

    parser = ArgumentParser(
        description="This script will read an analysis xml file and produce" +
        " image-data files. Main usage is for old projects who don't have " +
        " those files or if such files have been lost.")

    parser.add_argument("-i", "--input-file", type=str, dest="inputFile",
                        help="xml-file to be read", metavar="PATH")

    parser.add_argument("-o", "--ouput-path", type=str, dest="outputPath",
                        help="Path to directory where image data will be put." +
                        " Default is same directory as input-file",
                        metavar="PATH", default=None)

    parser.add_argument("-a", "--ask-remove", type=bool, dest="ask",
                        help="Ask to remove pre-existing files image data " +
                        "files in output directory. Default: False",
                        default=False)

    parser.add_argument("-m", "--measure", type=str, dest="measure",
                        help="Specify measure to be used", default=0)

    args = parser.parse_args()

    if (args.inputFile is None or not os.path.isfile(args.inputFile)):
        parser.error("Could not locate file '{0}'".format(args.inputFile))

    if (args.outputPath is None):
        args.outputPath = os.path.dirname(args.inputFile)

    if (args.outputPath == ""):
        args.outputPath = "."

    if (isinstance(args.measure, str)):

        if args.measure in DEFAULT_SEQUENCE:

            args.measure = DEFAULT_SEQUENCE[args.measure]

        else:

            parser.error(
                "Unknown measure \"{0}\", allowed are nubers and:\n{1}".format(
                args.measure, DEFAULT_SEQUENCE.keys()))
            sys.exit(-1)

    if not os.path.isdir(args.outputPath):
        os.mkdir(args.outputPath)

    for p in image_data.ImageData.iter_image_paths(args.outputPath):
        if (not args.ask or
                "n" not in raw_input("Remove {0}? (Y/n)".format(p)).lower()):

            os.remove(p)
            log.info("Removed pre-exisiting file '{0}'".format(p))

    xmlData = reader.XML_Reader(file_path=args.inputFile)

    log.info("Data read")

    image_data.ImageData.write_times_from_xml(args.outputPath, xmlData)

    log.info("Scan Time data saved")

    image_data.ImageData.iter_write_image_from_xml(args.outputPath, xmlData,
                                                measure=args.measure)

    log.info("Image Data saved")
    log.info("Done!")
