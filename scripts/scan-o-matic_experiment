#!/usr/bin/env python
"""Script that runs the image aquisition"""

__author__ = "Martin Zackrisson"
__copyright__ = "Swedish copyright laws apply"
__credits__ = ["Martin Zackrisson"]
__license__ = "GPL v3.0"
__version__ = "0.9991"
__maintainer__ = "Martin Zackrisson"
__email__ = "martin.zackrisson@gu.se"
__status__ = "Development"

#
# DEPENDENCIES
#

from argparse import ArgumentParser
from subprocess import Popen
from time import sleep
import sys
import os

#
# SCANNOMATIC LIBRARIES
#

from scanomatic.io import rpc_client
from scanomatic.io.logger import Logger

#
# FUNCTIONS
#


def get_pinnings_list(pinning_string):

    try:

        pinning_str_list = pinning_string.split(",")

    except TypeError:

        return None

    pinning_list = list()
    for p in pinning_str_list:

        try:

            p_list = tuple(map(int, p.split("x")))

        except ValueError:

            p_list = None

        pinning_list.append(p_list)

    return pinning_list

if __name__ == "__main__":

    print "Experiment called with:\n{0}\n".format(" ".join(sys.argv))

    default_root = os.path.abspath(os.curdir)

    parser = ArgumentParser(description="""Runs a session of image gathering
given certain parameters and creates a first pass analysis file which is the
input file for the analysis script.""")

    parser.add_argument('--scanner', type=int, dest='scanner', help='Scanner to be used')

    parser.add_argument(
        '--interval', type=float, default=20.0,
        dest='interval',
        help='Minutes between scans (Default 20.0 min)')

    parser.add_argument(
        '--scans', type=int, default=217,
        dest='number_of_scans',
        help='Number of scans requested (Default 217)')

    parser.add_argument(
        '--root', type=str, dest='root', default=default_root,
        help='Projects root (Default "{0}")'.format(default_root))

    parser.add_argument(
        '--prefix', type=str, dest='prefix', default="",
        help='Project prefix')

    parser.add_argument(
        '--description', type=str, default="", dest='description',
        help='Project description')

    args = parser.parse_args()

    logger = Logger("Experiment: {0}".format(args.prefix))

    client = rpc_client.get_client(admin=True)
    if not client.online:
        Popen(['scan-o-matic_server'], shell=False)
        logger.info("Will wait some seconds while server starts up")
        sleep(2)
        logger.info("And just a little more")
        sleep(3)

    if not client.online:
        logger.critical("Server is lost in space... get help!")

    elif args.scanner is None:

        logger.warning("Exactly how do you intend to scan when you don't inform me of which scanner to use?")

    elif client.create_scanning_job({"number_of_scans": args.number_of_scans,
                                     "time_between_scans": args.interval,
                                     "scanner": args.scanner - 1,
                                     "directory_containing_project": args.root,
                                     "project_name": args.prefix,
                                     "description": args.description}):

        logger.info("Project accepted! Have a nice day. Do something unexpected.")

    else:

        logger.critical("Ooops! You are up to something not kosher, look over your parameters and give it a new try.")
