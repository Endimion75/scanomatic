  ##########################
##### THE WHAT NEXT PLACE #####
   ##########################

--- HOT ---

*** EXPERIMENT ONE: The gui run all return red on power down?

*** STARTUP: Reconnect to subprocs and clean up if needed

    * Half-done, progress for running experiment doesn't look nice and
    probably don't work correctly (psm should be filled out)

*** ANALYSE ONE should give visual warning when capping

    * GUI is there, just need to thread analysis

*** LAN-PM 1: Init takes some time, should only need to test once per PM and not
    per socket <- scanner should get socket, not get pm!

    * Should be faster while above still not fixed

*** LAN-PM 2: If host does not exist the urltimeout is too long, maybe also run
    seperate thread anyhow.

*** ALL: Rotate and flip image display so that it matches the user perspective
    GOOD DISPLAY:
        self.image_ax.imshow(np.fliplr(model['im']), cmap=plt.cm.Greys_r, 
            origin='lower',
    NEED:
        fix all other... make a lr-display-value converter eg. im.shape[0] - x

--- DEBUGGING ---

--- GUI ---


--- SPACE-TRANSITIONS ---

*** The 'Pixel Value Space' to 'Kodak Value Space' could use the advanced 
    algorithm

--- GRIDDING ---

*** Investigate resolving equal grid start pos with using most 
    centric, and using the R-value as well...(some missed peaks will
    affect placement)

--- BLOB-DETECTION ---

*** New structure needed for all the grid cell abstract layers (Blob, Bg, Trash, Cell)

*** Do a check on BG to throw out outliers from the BG into trash

*** Let the subtracted BG be a plane and not a single value.

*** The iterative roundness test could use the threshold of otsu as start
    and could use fsolve too!

*** Use where previous blob was detected!

*** Think about finding a good level of a thresholded image for blobedge

*** http://scipy-lectures.github.com/advanced/image_processing/index.html

*** http://www.scipy.org/Cookbook/Least_Squares_Circle

--- OTHER ---

*** Most fungii see blue light at 450 nm - How is the pattern of our lamp??

*** SANE should discover scanner better

*** Think about PIL I16 support
    http://old.nabble.com/import-16-bit-tiff---byte-order-problem--td20374391.html
    http://blog.philippklaus.de/2011/08/handle-16bit-tiff-images-in-python/

*** Scanner selection is still awkward... (only one scanner per program I think

*** Checking of space left on HD


  ########################################
##### OUTDATED DUE TO SWITCH TO NEW GUI #####
   ########################################

*** Gray-scale fails to analyse at 150 dpi

*** The Analyse One GUI have strange behaviour in why extra im-array is
    needed to have toggling between Cell Estimate and Kodak

*** gui_anal.. 623 f_sel....mark(... -> r_fixt 120 Xs, Ys set.A.find... -> None not iterable

*** Make Analyse One use the grid if one pleases...

*** Make scanner-queue lay outside program so several instances of program
    will be OK.

(*** Extend functionality in fixture view (Gray-scale values)
    Status: Begun. Something wrong in fixture)

*** Extend functionality in config view

(*** Use a queue for all things to be done and a scheduler)

  ###################################
##### HALL OF COMPLETIONLIKE STATE #####
   ###################################


*** EXPERIMENT ONE: Make GUI not HANG

*** Make shortcut doesn't work

*** EXPERIMENT Check that progressbar is nice
        just make it go on estimated time

*** New Scanner Lock not emptied

*** SUBPROCS ANALYSIS: Make possiblility of inspecting gridding

*** GRIDDING isn't reliable

*** FIXTURE: All should use path-resource to get filenames

*** GLOBALS for diff version compatibility -> resourceCONFIG

*** FIX INCOMPATIBILITY IMAGE SECTIONS

*** ANALYSE: Cut Cell Estimate at 2000 and warn

*** ANALYSE: Loading CSV messes up columns in display

*** INSTALL DESKTOP ICON

*** DIALOGUE: Sel dir should start in fit place

*** ASK QUIT: Doesn't work

*** MAIN: Why doesn't the program allow for not closing?

*** EXPERIMENT: Need to pass pinning-arrays

*** EXPERIMENT change in rootdir don't help

*** ANALYSIS: Investigate why calibration step never ends

*** GS after calibration doesn't seem to match correct place... scaling or im-flipping?

*** TYPE issues with resource config files (fixtures)

*** SCAN IMAGE IN FIX CALIBRATION OF NEW FIXTURE!

*** FIXTURE: Add so conf has its own name

*** CALIBRATION: Fixtures' analysis of GS indices is written badly to config
    Maybe due to being array?

*** Images show distinct blob-detection failiour at early stages using
    current detection algorithms

*** Investigate only using the inter-quartile part of signal at
    grid-placement to calculate the otsu-threshold.

*** User needs to know if the analysis-script is working...

*** Check Pattern-finding if it doesn't demand one too many intervals for optimal curve-start
    -> Seems so, line 244 in resource_signal, changed the while statement 'n' >>> '(n-1)'

*** Check how time of steapest curve correlates with blob engulfing aura

*** Check so each grid cell actually has its data at all times (the summary image looks bad).

*** Analysis One should allow for any space.

*** Fixture should respond to what fixture is selected in start experiment!

*** Fixture causes file-crash if conf-file not correct.

*** Fixture creation requires program restart(s) to work properly

*** Make experiment last until analysis of last image is done

*** Abort button on running experiment

(*** Extend functionality in fixture view (Cell calibration))

*** Implement reusable canvases everywhere, look in analysis.py

*** Fixture: Re-implement all functionality.

--- Kodak > Cell Estimate Space ---
---

*** Fixture is nicer

*** Make it possible to monitor the gray-scale values

*** Using the vectors, fit a 3-5 deg polynomial with positive co-effs such
    that the sum of the vector's Y-values equals the measured cell count value

*** Once a curve for all measures have been fitted, reproduce the cell count by
    selecting the blobs (Note this is proximate to circular)

*** Mark data by time-point of sampling

*** Collect new calibration data to verify the goodness of the calibration

*** In subracting background:mean disallow negative values (blobs being pos)

*** Make cells count as positives in Kodak space (* -1)

*** Make calibration.data contain vector of all pixels as a hashed table

*** Make stress test unit that randomly deletes detected peaks before
    grid placement

*** Calculate the distance of grid jumping one signal peak unit
    Use for R-threshold (make sure R is per blob).

*** Make it possible to reuse canvases please <- maybe baby

*** Check if OpenCV is installed and if not, use fallback analysis

*** Check so that the grid-cell has appropriate size

*** Remake gray-scale so that it uses Kodak Z-values

*** CHECK INTERPOLATION

*** Change to user specifying output dir - not file

*** Make script save grid-placement as a file for certain time-points.

*** Report building takes about as long as analysis when processing a project
    Look at appending sections

*** Check why not analysing all plates???

*** Grayscale norm!

*** Solve eq for grayscale fransformation...

*** Remake entire Fixture GUI image selection handling
    Make it possible to select areas again

*** See why not log_writer produces a progress.png in the right place

*** Make project check <- What does that mean?

*** Make creation of log-file post-scanning produce everythin that on-the-fly
   production does except first entry...

*** Make Analyse One more according to new ways of Fixture

*** Fix log-file from scanning, see upload on server.

*** Make a config file setting GUI

*** Capture mouse events on canvases from matplotlib instead of using images

*** Make a single analysis interface

*** Make scan one be an experiment, easier to use the same pipe

*** Cut out all the different parts to separate files in src

*** Get all pattern from config file

*** Do grayscale detection in 600dpi, it is way too nice and smooth in 150dpi

*** Make interface label-show width nice

*** Include all the coordinates for all subsections on all images in 
   logfile.

*** Grayscale module
*   other way of finding indices
        cutoff = 1.0
        indices = ml.find(D > cutoff) 
*   should it be a mean(mean()) or just a mean(2d)

*** Use 1 scanner fixture settings per scanner fixture
    Not implemented as such but now analyis reloads settings

*** Make 'Scan one' nicer

*** Lock scanners so that you cannot scan when it's working

*** Make app take two types of directories:
        App-directory
        Save-data directory

*** Make Grayscale x-pos offset so that first is 0 otherwise will depend on things..
   Also make the x-pos be devided by meandist

*** Restructure Image Analysis into nicer parts

*** Fix launching so that it works from other directories

*** The Fixture confile must save the fixture marking path

*** SISPMCTF
* Make sure user really has the right priveleges

***Set minimum scanning interval to 7minutes if rescan enabled else 4minutes

***Fixture should have crashed head dummy-marking

*** This seems to not have had anything cool in it...
http://www.epson.com/cgi-bin/Store/support/supDetail.jsp?oid=66172&prodoid=63056499&BV_UseBVCookie=yes&infoType=Downloads&platform=Other&x=3&y=0

*** Make sure the scanning is run in seperate thread but send event when done
*   DONE: Separate thread, but no callback active yet
*   I think it is done

*** Fix histograms for linux:
*   Fix axis etc so that picture is small as possible
        plt.xlim([0,255])       <- Should depend on pixel depth

*** SANE
*   sane-find-scanner -q devname
*   IF usb-problem: http://www.sane-project.org/README.linux
*   scanimage/epson/sane-epson
*   scanimage -d 'epson2:libusb:001:006' -f tiff --mode Gray --depth 12 --resolution 600.0 --auto-area-segmentation no -l 0.0 -t 0.0 -x 10.0 -y 12.0 --source TPU --focus-position "Focus 2.5mm above glass"
*   scanimage -d [dev] --dont-scan
*   scanimage --all-options
*   scanimage -d 'epson2:libusb:001:006' --mode Gray --depth 16 --resolution 600 --source 'Transparaency Unit'
*   scanimage --format tiff --resolution 600 --mode Gray --source Transparency -l 0 -t 0 -x 215.9 -y 297.18 --depth 16 > test.tiff
*   Compliing: ./configure --prefix=/home/martin/SANE_dev
*   Run scanimage in bin-directory created above.
*   Diff reporting: diff . ../../sane-backends-1.0.22/backend/ | grep -v -e"^Only in"
